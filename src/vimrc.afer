"map <F2> :bufdo! w<CR>
map <F1> <ESC>:tabfirst<CR>
map <F2> <ESC>:w<CR>
map <F3> <ESC>:w<CR>:!pytest --cov-report term-missing --cov='.'<CR>
"map <F4>.
"map <F5>.
"map <F6>.
"map <F7> <ESC>:SyntasticCheck<CR>
"map <F8>.
map <F9> <ESC>:make<CR>
map <F10> <ESC>:tabnew
map <F11> <ESC>:tabprevious<CR>
map <F12> <ESC>:tabnext<CR>


" simplyfold
let g:SimpylFold_docstring_preview = 1

" change jedi-vim usage mapping to not crash with nerdtree
let g:jedi#usages_command = "<leader>jn"
"au BufNewFile,BufRead *.py
"    \ set tabstop=4
"    \ set softtabstop=4
"    \ set shiftwidth=4
"    \ set textwidth=79
"    \ set expandtab
"    \ set autoindent
"    \ set fileformat=unix
"
" open NerdTree automatically when vim started with no arguments
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
":q will close vim if only window left is NerdTree (no need to do :q twice)
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:flake8_show_in_gutter=1
let g:flake8_quickfix_location="top"
let g:flake8_quickfix_height=4
autocmd BufWritePost *.py call Flake8()

" ---- Minimal configuration:
set smartindent   " Do smart autoindenting when starting a new line
set shiftwidth=4  " Set number of spaces per auto indentation
set expandtab     " When using <Tab>, put spaces instead of a <tab> character

" ---- Good to have for consistency
" set tabstop=4   " Number of spaces that a <Tab> in the file counts for
" set smarttab    " At <Tab> at beginning line inserts spaces set in shiftwidth

