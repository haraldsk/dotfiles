# Act like screen
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# remap useless space fuckup and make more like screen
unbind-key SPACE
unbind-key n

bind-key SPACE next-window
bind-key BSPACE previous-window


# mouse mode and vim keys
set -g mouse on
setw -g mode-keys vi
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# More straight forward key bindings for splitting
unbind %
bind | split-window -h
unbind '"'
bind - split-window -v

set-option -g default-shell "/bin/bash"


bind k confirm kill-window
bind K confirm kill-session
bind S command-prompt -p "New Session:" "new-session -A -s '%%'"
bind-key / command-prompt "split-window 'exec man %%'"

bind < resize-pane -L 5
bind > resize-pane -R 5

#  reload tmux
bind r source-file ~/.tmux.conf

bind-key C-p pipe-pane -o 'cat >>~/output.#I-#P'
bind-key j command-prompt "join-pane -t '%%'"

# Terminal emulator window title
set -g set-titles on
set -g set-titles-string '#S:#I.#P #W'

# status Bar
set-option -g status-bg black
set-option -g status-fg cyan

# clock {
setw -g clock-mode-colour green
setw -g clock-mode-style 24
# }

# historya {
set -g history-limit 10000
# }

# Switch pane Pane
unbind o
# bind C-s down-pane

# Notifying if other windows has activities
setw -g monitor-activity off
set -g visual-activity on

set -g default-terminal "screen-256color"

# remap useless space fuckup and make more like screen
unbind-key SPACE
unbind-key BSPACE
unbind-key n

bind-key SPACE next-window
bind-key BSPACE previous-window



# 'tmux-plugins/tpm' {
set -g @plugin 'tmux-plugins/tpm'

if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

run-shell ~/.tmux/plugins/tpm/tpm
# }

# christoomey/vim-tmux-navigator {
set -g @plugin 'christoomey/vim-tmux-navigator'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
# }

# window ressurection and automatic restore {
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
# }

set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-sensible'

# tmux-fzf {
set -g @plugin 'sainnhe/tmux-fzf'
TMUX_FZF_LAUNCH_KEY="C-f"
TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"
# }

# dracula-tmux {
set -g @plugin 'dracula/tmux'
set -g @dracula-show-powerline true
set -g @dracula-show-flags true
set -g @dracula-show-left-icon session
set -g @dracula-show-fahrenheit false
set -g @dracula-show-location true
set -g @dracula-cpu-display-load true

set -g status-position top

# }
